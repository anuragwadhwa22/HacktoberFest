{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anuwadhw\\\\React\\\\react-authentication\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const reminingDuration = adjExpirationTime - currentTime;\n  return reminingDuration;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const initialToken = localStorage.getItem(\"token\"); // if user already logged in token will be found in local storage\n\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token; //converts it to boolean value\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token); // for storing the token in local storage to keep the user loogied in after reload\n\n    localStorage.setItem(\"expirationTime\", expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/anuwadhw/React/react-authentication/src/store/auth-context.js"],"names":["React","useState","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","reminingDuration","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","AuthContextProvider","props","initialToken","setToken","userIsLoggedIn","logoutHandler","removeItem","clearTimeout","loginHandler","setItem","remainingTime","setTimeout","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,IAAIC,WAAJ;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACtCC,EAAAA,KAAK,EAAE,EAD+B;AAEtCC,EAAAA,UAAU,EAAE,KAF0B;AAGtCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;AAItCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B;AAEA,QAAME,gBAAgB,GAAGD,iBAAiB,GAAGH,WAA7C;AACA,SAAOI,gBAAP;AACD,CAND;;AAQA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,QAAMC,oBAAoB,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAA7B;AACD,CAHD;;AAKA,OAAO,MAAME,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAMC,YAAY,GAAGL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB,CAD4C,CACQ;;AACpD,QAAM,CAACd,KAAD,EAAQmB,QAAR,IAAoBvB,QAAQ,CAACsB,YAAD,CAAlC;AAEA,QAAME,cAAc,GAAG,CAAC,CAACpB,KAAzB,CAJ4C,CAIZ;;AAEhC,QAAMqB,aAAa,GAAG,MAAM;AAC1BF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAN,IAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB;;AAEA,QAAIzB,WAAJ,EAAiB;AACf0B,MAAAA,YAAY,CAAC1B,WAAD,CAAZ;AACD;AACF,GAPD;;AASA,QAAM2B,YAAY,GAAG,CAACxB,KAAD,EAAQK,cAAR,KAA2B;AAC9Cc,IAAAA,QAAQ,CAACnB,KAAD,CAAR;AACAa,IAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8BzB,KAA9B,EAF8C,CAER;;AACtCa,IAAAA,YAAY,CAACY,OAAb,CAAqB,gBAArB,EAAuCpB,cAAvC;AAEA,UAAMqB,aAAa,GAAGtB,sBAAsB,CAACC,cAAD,CAA5C;AACAR,IAAAA,WAAW,GAAG8B,UAAU,CAACN,aAAD,EAAgBK,aAAhB,CAAxB;AACD,GAPD;;AASA,QAAME,YAAY,GAAG;AACnB5B,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,UAAU,EAAEmB,cAFO;AAGnBlB,IAAAA,KAAK,EAAEsB,YAHY;AAInBrB,IAAAA,MAAM,EAAEkB;AAJW,GAArB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEO,YAA7B;AAAA,cACGX,KAAK,CAACY;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApCM;;GAAMb,mB;;KAAAA,mB;AAsCb,eAAelB,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  const currentTime = new Date().getTime();\r\n  const adjExpirationTime = new Date(expirationTime).getTime();\r\n\r\n  const reminingDuration = adjExpirationTime - currentTime;\r\n  return reminingDuration;\r\n};\r\n\r\nconst retrieveStoredToken = () => {\r\n  const storedToken = localStorage.getItem(\"token\");\r\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\r\n};\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const initialToken = localStorage.getItem(\"token\"); // if user already logged in token will be found in local storage\r\n  const [token, setToken] = useState(initialToken);\r\n\r\n  const userIsLoggedIn = !!token; //converts it to boolean value\r\n\r\n  const logoutHandler = () => {\r\n    setToken(null);\r\n    localStorage.removeItem(\"token\");\r\n\r\n    if (logoutTimer) {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  };\r\n\r\n  const loginHandler = (token, expirationTime) => {\r\n    setToken(token);\r\n    localStorage.setItem(\"token\", token); // for storing the token in local storage to keep the user loogied in after reload\r\n    localStorage.setItem(\"expirationTime\", expirationTime);\r\n\r\n    const remainingTime = calculateRemainingTime(expirationTime);\r\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\r\n  };\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"]},"metadata":{},"sourceType":"module"}